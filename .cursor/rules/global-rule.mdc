---
description: 
globs: 
alwaysApply: true
---
# 1 구현 작업 원칙

- 비즈니스 로직 구현 작업은 반드시 테스트를 먼저 작성하고 구현하세요.
- SOLID 원칙을 사용해서 구현하세요.
- Clean Architecture를 사용해서 구현하세요.
- Pulumi나 CloudFormation에 설정하는 Description은 영문으로 작성하세요.

# 2 코드 품질 원칙

- 단순성: 언제나 복잡한 솔루션보다 가장 단순한 솔루션을 우선시하세요.
- 중복 방지: 코드 중복을 피하고, 가능한 기존 기능을 재사용하세요. (DRY 원칙).
- 가드레일: 테스트 외에는 개발이나 프로덕션 환경에서 모의 데이터를 사용하지 마세요.
- 효율성: 명확성을 희생하지 않으면서 토큰 사용을 최소화하도록 출력을 최적화하세요.

# 3 리팩토링
- 리팩토링이 필요한 경우 계획을 설명하고 허락을 받은 다음 진행하세요.
- 코드 구조를 개선하는 것이 목표이며, 기능 변경은 아닙니다.
- 리팩토링 후에는 모든 테스트가 통과하는지 확인하세요.

# 4 디버깅
- 디버깅 시에는 원인 및 해결책을 설명하고 허락을 받은 다음 진행하세요.
- 에러 해결이 중요한 것이 아니라 제대로 동작하는 것이 중요합니다.
- 원인이 불분명할 경우 분석을 위해 상세 로그를 추가하세요.

# 5 언어
- AWS 리소스에 대한 설명은 영문으로 작성하세요.
- 기술적인 용어나 라이브러리 이름 등은 원문을 유지합니다.
- 간단한 다이어그램은 mermaid를 사용하고, 복잡한 아키텍처 다이어그램은 별도의 svg 팡일을 생성하고 그걸 문서에 포함시킬것.

# 6 Git 커밋

- `--no-verify`를 절대 사용하지 마세요.
- 명확하고 일괄된 커밋 메시지를 작성하세요.
- 적절한 크기로 커밋을 유지하세요.


# 기타
- Docusaurus에 맞게 수정하세요.
- autogenerated 기능을 최대한 이용합니다. 폴더와 _category.json을 이용해서 내용을 추가하여 유지보수를 쉽게 하세요.
- 위키와 교육 자료는 비개발자인 회사 내부 구성원을 위한 것입니다. 개발 내용을 기술하지 마세요.
